y <- 2 + x*rnorm(1)
plot(y)
x
x*rnorm(1)
rnorm(1)
x*runif(1)
y <- 2 + x*runif(1)
plot(y)
x*runif(1)
x%*%runif(1)
x%*%runif(100)
x
x%*t(%runif(100))
x%*%t(runif(100))
x
dim(x)
class(x)
t(x)%*%runif(100)
t(x)*runif(100)
x
runif(100)
x*runif(100)
length(x)
x <- seq(1,100,1)
y <- 2 + x*runif(100)
plot(y)
y <- 2 + x*rnorm(100)
plot(y)
y <- 2 + 4*x*rnorm(100)
plot(y)
y <- 2 + 4*x*rnorm(100,mean=2)
plot(y)
y <- 2 + 4*x*rnorm(100,mean=3)
plot(y)
y <- 2 + 4*x*rnorm(100,mean=3,sd=2)
plot(y)
lm(y~x)
lm(y~x)$x
lm(y~x)$coef
lm(y~x)$coef[2]
alpha <- lm(y~x)$coef[1]
beta <- lm(y~x)$coef[2]
abline(a=alpha, b=beta)
plot(y)
abline(a=alpha, b=beta)
ggplot(data = y, aes(x=x,y=y)) + geom_abline()
library(ggplot2)
ggplot(data = y, aes(x=x,y=y)) + geom_abline()
scatter = data.frame(x=x,y=y)
ggplot(data = scatter, aes(x=x,y=y)) + geom_abline()
ggplot(data = scatter, aes(x=x,y=y)) + geom_abline(intercept = alpha, slope = beta)
scatter
ggplot(data = scatter, aes(x=x,y=y)) + geom_point() + geom_abline(intercept = alpha, slope = beta)
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red')
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size = 3)
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size = 2)
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size = 1.5)
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size = 1)
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red')
model <- lm(y~x, scatter)
alpha <- model$coef[1]
beta <- model$coef[2]
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size=1) +
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size=1)
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size=1) + ggtitle("Line of best fit") + theme(plot.title = element_text(lineheight=.8, face="bold"))
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size=1) + ggtitle("Line of best fit") + theme(plot.title = element_text(lineheight=1.0, face="bold"))
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size=1) + ggtitle("Line of best fit") + theme(plot.title = element_text(size=12,face="bold"))
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size=1) + ggtitle("Line of best fit") + theme(plot.title = element_text(size=16,face="bold"))
plot(c(0,1), c(0,1))
text(x = 0.5, y = 0.5, '{', srt = 90, cex = 8, family = 'Helvetica Neue UltraLight')
text(x = 0.5, y = 0.5, '{', srt = 90, cex = 8)
y <- 2 + 4*x*rnorm(100,mean=0,sd=2)
x <- seq(1,100,1)
y <- 2 + 4*x*rnorm(100,mean=0,sd=2)
scatter = data.frame(x=x,y=y)
model <- lm(y~x, scatter)
alpha <- model$coef[1]
beta <- model$coef[2]
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size=1) + ggtitle("Line of best fit") + theme(plot.title = element_text(size=16,face="bold"))
y <- 2 + 4*x*rnorm(100,mean=4,sd=2)
scatter = data.frame(x=x,y=y)
model <- lm(y~x, scatter)
alpha <- model$coef[1]
beta <- model$coef[2]
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size=1) + ggtitle("Line of best fit") + theme(plot.title = element_text(size=16,face="bold"))
```
y <- 2 + 4*x*rnorm(100,mean=4,sd=1)
scatter = data.frame(x=x,y=y)
model <- lm(y~x, scatter)
alpha <- model$coef[1]
beta <- model$coef[2]
ggplot(data = scatter, aes(x=x,y=y)) +  geom_point() +  geom_abline(intercept = alpha, slope = beta, color = 'red', size=1) + ggtitle("Line of best fit") + theme(plot.title = element_text(size=16,face="bold"))
getwd()
y <- rnorm(length(x))
x <- seq(0,1,by=0.01)
y <- rnorm(length(x))
plot(y)
y <- 4 + 3*x*rnorm(length(x))
plot(y)
y <- 4 + 3*x*rnorm(length(x),2)
plot(y)
y <- 4 + 3*x*rnorm(length(x),2,sd=0.1)
plot(y)
y <- 4 + 3*x*rnorm(length(x),2,sd=0.2)
plot(y)
y <- 4 + 3*x*rnorm(length(x),2,sd=0.3)
plot(y)
df <- data.frame(cbind(X=x,Y=y))
df
ggplot(data=df,aes(x=X,y=Y)+geom_point(size=4)
ggplot(data=df,aes(x=X,y=Y))+geom_point(size=4)
library(ggplot2)
ggplot(data=df,aes(x=X,y=Y))+geom_point(size=4)
ggplot(data=df,aes(x=X,y=Y))+geom_point(size=2)
x <- cbind(1,x)
theta<- c(0,0)
m <- nrow(x)
m
cost <- sum(((x%*%theta)- y)^2)/(2*m)
cost
gradDescent<-function(X,y,theta){
m <- length(y)
grad <- rep(0,length(theta))
for (i in 1:5000){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - 0.0011 * grad
# print(costFun(X,y,theta))
# print(theta)
}
return(theta)
}
X1<-matrix(ncol=1,nrow=nrow(df),cbind(1,data$X))
X1<-matrix(ncol=1,nrow=nrow(df),cbind(1,df$X))
Y1<-matrix(ncol=1,nrow=nrow(df),df$Y)
init_theta<-as.matrix(c(0,0))
cost <- function(x,y,theta) return(sum(((x%*%theta)- y)^2)/(2*m))
cost(X,y,init_theta)  # J(theta) = 0.693
cost(X1,Y1,init_theta)  # J(theta) = 0.693
theta
init_theta<-as.matrix(c(0))
cost(X1,Y1,init_theta)  # J(theta) = 0.693
theta<-gradDescent(X1,Y1,init_theta) # initial grad theta = [-0.1 -12.01 -11.26]
theta
cost(X1,Y1,theta)
gradDescent<-function(X,y,theta){
m <- length(y)
grad <- rep(0,length(theta))
for (i in 1:50000){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - 0.0011 * grad
# print(costFun(X,y,theta))
# print(theta)
}
return(theta)
}
theta<-gradDescent(X1,Y1,init_theta) # initial grad theta = [-0.1 -12.01 -11.26]
theta
cost(X1,Y1,theta)
gradDescent<-function(X,y,theta){
m <- length(y)
grad <- rep(0,length(theta))
for (i in 1:500000){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - 0.0011 * grad
# print(costFun(X,y,theta))
# print(theta)
}
return(theta)
}
theta<-gradDescent(X1,Y1,init_theta) # initial grad theta = [-0.1 -12.01 -11.26]
cost(X1,Y1,theta)
c(0.5)%*%theta ## 76% chance of being admitted, which would put them in the "Admitted" category
theta
gradDescent<-function(X,y,theta){
m <- length(y)
grad <- rep(0,length(theta))
for (i in 1:500){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - 0.0011 * grad
print(costFun(X,y,theta))
print(theta)
}
return(theta)
}
theta<-gradDescent(X1,Y1,init_theta)
gradDescent<-function(X,y,theta){
m <- length(y)
grad <- rep(0,length(theta))
for (i in 1:500){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - 0.0011 * grad
print(cost(X,y,theta))
print(theta)
}
return(theta)
}
theta<-gradDescent(X1,Y1,init_theta)
gradDescent<-function(X,y,theta,iterations){
m <- length(y)
grad <- rep(0,length(theta))
for (i in 1:iterations){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - 0.0011 * grad
print(cost(X,y,theta))
print(theta)
}
return(theta)
}
iterations = 1000
theta<-gradDescent(X1,Y1,init_theta,iterations)
gradDescent<-function(X,y,theta,iterations,alpha){
m <- length(y)
grad <- rep(0,length(theta))
cost.df <- data.frame()
for (i in 1:iterations){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - alpha * grad
cost.df <- rbind(cost.df,c(cost(X,y,theta),theta))
}
print(head(cost.df))
return(theta)
}
iterations = 100
alpha = 0.001
gradDescent(X1,Y1,init_theta,iterations,alpha)
cost.df <- data.frame(cost,theta)
cost.df
cost.df <- data.frame(cost=0,theta=0)
cost.df
gradDescent<-function(X,y,theta,iterations,alpha){
m <- length(y)
grad <- rep(0,length(theta))
cost.df <- data.frame(cost=0,theta=0)
for (i in 1:iterations){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - alpha * grad
cost.df <- rbind(cost.df,c(cost(X,y,theta),theta))
}
print(head(cost.df))
return(theta)
}
theta<-gradDescent(X1,Y1,init_theta,iterations,alpha)
gradDescent<-function(X,y,theta,iterations,alpha){
m <- length(y)
grad <- rep(0,length(theta))
cost.df <- data.frame(cost=0,theta=0)
for (i in 1:iterations){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - alpha * grad
cost.df <- rbind(cost.df,c(cost(X,y,theta),theta))
}
return(list(theta,cost.df))
}
theta<-gradDescent(X1,Y1,init_theta,iterations,alpha)[1]
theta
gradDescent(X1,Y1,init_theta,iterations,alpha)[2]
theta
cost.df <- data.frame(cost=NULL,theta=NULL)
cost.df
cost.df <- data.frame(cost=NA(),theta=NA)
cost.df <- data.frame(cost=NA,theta=NA)
cost.df
gradDescent<-function(X,y,theta,iterations,alpha){
m <- length(y)
grad <- rep(0,length(theta))
cost.df <- data.frame(cost=NA,theta=NA)
for (i in 1:iterations){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - alpha * grad
cost.df <- rbind(cost.df,c(cost(X,y,theta),theta))
}
return(list(theta,cost.df))
}
theta <- gradDescent(X1,Y1,init_theta,iterations,alpha)[1]
cost.df <- gradDescent(X1,Y1,init_theta,iterations,alpha)[2]
theta
cost.df
## generic gradient descent instead
gradDescent<-function(X,y,theta,iterations,alpha){
m <- length(y)
grad <- rep(0,length(theta))
cost.df <- data.frame()
for (i in 1:iterations){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - alpha * grad
cost.df <- rbind(cost.df,c(cost=cost(X,y,theta),theta=theta))
}
return(list(theta,cost.df))
}
theta <- gradDescent(X1,Y1,init_theta,iterations,alpha)[1]
cost.df <- gradDescent(X1,Y1,init_theta,iterations,alpha)[2]
theta
tail(cost.df)
plot(cost.df)
plot(cost.df$theta,cost.df$cost)
gradDescent<-function(X,y,theta,iterations,alpha){
m <- length(y)
grad <- rep(0,length(theta))
cost.df <- data.frame(cost=0,theta=0)
for (i in 1:iterations){
h <- X%*%theta
grad <-  (t(X)%*%(h - y))/m
theta <- theta - alpha * grad
cost.df <- rbind(cost.df,c(cost(X,y,theta),theta))
}
return(list(theta,cost.df))
}
theta <- gradDescent(X1,Y1,init_theta,iterations,alpha)[1]
cost.df <- gradDescent(X1,Y1,init_theta,iterations,alpha)[2]
plot(cost.df$theta,cost.df$cost)
cost.df
cost.df$theta
plot(cost.df[,2],cost.df[,1])
plot(cost.df[2,],cost.df[1,])
cost.df
cost.df[1]
cost.df[1][1]
cost.df[[1]]
cost.df[[1]][1]
plot(cost.df[[1]][2],cost.df[[1]][1])
cost.df[[1]][2]
cost.df[[1]][1]
plot(y=cost.df[[1]][2],x=cost.df[[1]][1])
class(cost.df[[1]][2])
as.data.frame(cost.df)
cost.df <- gradDescent(X1,Y1,init_theta,iterations,alpha)[2]
cost.df <- as.data.frame(cost.df)
ggplot(cost.df,aes(x=cost.df$theta,y=cost.df$cost)) + geom_point()
cost.df <- as.data.frame(cost.df)[-1,]
ggplot(cost.df,aes(x=cost.df$theta,y=cost.df$cost)) + geom_point()
iterations = 1000
alpha = 0.001
theta <- gradDescent(X1,Y1,init_theta,iterations,alpha)[1]
cost.df <- gradDescent(X1,Y1,init_theta,iterations,alpha)[2]
cost.df <- as.data.frame(cost.df)[-1,]
ggplot(cost.df,aes(x=cost.df$theta,y=cost.df$cost)) + geom_point()
iterations = 10000
alpha = 0.001
theta <- gradDescent(X1,Y1,init_theta,iterations,alpha)[1]
cost.df <- gradDescent(X1,Y1,init_theta,iterations,alpha)[2]
cost.df <- as.data.frame(cost.df)[-1,]
ggplot(cost.df,aes(x=cost.df$theta,y=cost.df$cost)) + geom_point()
cost(X1,Y1,theta)
theta
Y1
X1
X1<-matrix(ncol=1,nrow=nrow(df),cbind(1,df$X))
cost(X1,Y1,theta)
X1
Y1
theta
theta <- results[1][[1]]
cost(X1,Y1,theta[[1]])
x <- seq(0,10,1)
x
sigmoid
y <- 1/(1+e^(-x))
y <- 1/(1+exp^(-x))
?xp
?exp
y <- 1/(1+exp(-x))
y
plot(y)
x <- seq(0,1,0.011)
y <- 1/(1+exp(-x))
plot(y)
x <- seq(0,1,0.01)
y <- 1/(1+exp(-x))
plot(y)
1/(1+exp(-1))
x <- seq(0,1,0.01)
x
y
x
x=10
-log(x)
x<-c(1:100)
plot(-log(x))
x1<-c(1:100)
plot(-log(x1))
x2<-c(-100:0)
plot(log(1-x2))
plot(-log(1-x2))
x1<-c(1:100)
plot(-log(x1))
x2<-c(-100:0)
x1<-c(1:1000)
plot(-log(x1))
x2<-c(-1000:0)
plot(-log(1-x2))
y <- 1/(1+exp(-x1))
plot(y)
y <- 1/(1+exp(-c(1:10)))
plot(y)
y <- exp(-c(1:10)))
y <- exp(-c(1:10))
plot(y)
y <- 1/(1+exp(-c(1:5)))
plot(y)
y <- 1/(1+exp(-c(1:50)))
plot(y)
y <- 1/(1+exp(-c(0:50)))
plot(y)
b0 = 1
b1 = 2
x<-c(1:10)
b0+b1*x
x0 <- b0+b1*x
x<-c(-10:10)
x0 <- b0+b1*x
x0
y0<-1/(1+exp^(-x0))
y0<-1/(1+exp(-x0))
y0
plot(y0)
x0<-c(-10:10)
y0<-1/(1+exp(-x0))
plot(y0)
x0<-c(1:10)
y0<-1/(1+exp(-x0))
plot(y0)
x0<-c(-100:100)
y0<-1/(1+exp(-x0))
plot(y0)
x0 <- c(-10:10)
y0 <- 1/(1+exp(-x0))
plot(y0)
pcurvelot(y0)
curve(y0)
?curve
curve(y0,x0)
y0 <- 1/(1+exp(-x))
curve(y0,x0)
curve(1/(1+exp(-x)),x0)
x0 <- c(-10:10)
curve(1/(1+exp(-x)),x0)
x0
curve(1/(1+exp(-x)),from=-10,to=10)
curve(1/(1+exp(-x)),from = -5,to = 5)
curve(1/(1+exp(-x)),from = -10,to = 10)
x1 <- c(1:100)
plot(-log(x1))
x2 <- c(-100:0)
plot(-log(1-x2))
curve(-log(x),from = 0, to = 100)
curve(-log(1-x),from = -100, to = 0)
curve(-log(1-x),from = -100, to = 1)
curve(-log(1-x),from = -100, to = 0)
curve(-log(x),from = 0, to = 100)
curve(-log(1-x),from = -100, to = 0)
curve(-log(1-x),from = -100, to = 0)
curve(-log(x),from = 0, to = 100)
curve(1/(1+exp(-x)),from = -10,to = 10)
data(menarche)
log_data <- data.frame(Y=menarche$Menarche/menarche$Total)
log_data$X <- menarche$Age
library("MASS")
data(menarche)
log_data <- data.frame(Y=menarche$Menarche/menarche$Total)
log_data$X <- menarche$Age
glm.out < glm(cbind(Menarche, Total-Menarche) ~ Age,family=binomial(logit), data=menarche)
lm.out <- lm(Y~X, data=log_data)
log_data$fitted <- glm.out$fitted
data_points <- ggplot(log_data) + geom_point(aes(x=X,y=Y),color='blue',size=3)
line_points <- data_points + geom_abline(intercept = coef(lm.out)[1], slope = coef(lm.out)[2],color='green',size=1)
curve_points <- line_points + geom_line(aes(x=X,y=fitted),color='red',size=1)
glm.out < glm(cbind(Menarche, Total-Menarche) ~ Age,family=binomial(logit), data=menarche)
glm(cbind(Menarche, Total-Menarche) ~ Age,family=binomial(logit), data=menarche)
glm.out <- glm(cbind(Menarche, Total-Menarche) ~ Age,family=binomial(logit), data=menarche)
lm.out <- lm(Y~X, data=log_data)
log_data$fitted <- glm.out$fitted
data_points <- ggplot(log_data) + geom_point(aes(x=X,y=Y),color='blue',size=3)
line_points <- data_points + geom_abline(intercept = coef(lm.out)[1], slope = coef(lm.out)[2],color='green',size=1)
library(ggplot2)
data_points <- ggplot(log_data) + geom_point(aes(x=X,y=Y),color='blue',size=3)
line_points <- data_points + geom_abline(intercept = coef(lm.out)[1], slope = coef(lm.out)[2],color='green',size=1)
curve_points <- line_points + geom_line(aes(x=X,y=fitted),color='red',size=1)
log_data$fitted <- glm.out$fitted
data_points <- ggplot(log_data) + geom_point(aes(x=X,y=Y),color='blue',size=3)
line_points <- data_points + geom_abline(intercept = coef(lm.out)[1], slope = coef(lm.out)[2],color='green',size=1)
curve_points <- line_points + geom_line(aes(x=X,y=fitted),color='red',size=1)
curve_points <- line_points + geom_line(aes(x=X,y=fitted),color='red',size=1)
curve_points
line_points
data_points
curve_points
curve(-log(x),from = 0, to = 100)
curve(-log(1-x),from = -100, to = 0)
A = matrix(c(5,2,2,5),nrow=2)
|A - L*diag(nrow(A))| = 0
A
diag(nrow(A))
I = diag(nrow(A))
det(c(5-l,2,2,5-l))
c(5-l,2,2,5-l)
getwd()
setwd('C:\Users\Ilan Man\Desktop\Personal')
library(slidify)
setwd('C:/Users/Ilan Man/Desktop/Personal/Rpres_ml_2')
slidify('index.rmd')
slidify('index.rmd')
