tennis_predict <- predict(voting_test[,-1],voting_test[,1])
voting_test[,1]
voting_train[,-1]
tennis_predict <- predict(tree_model,voting_test[,-11])
tennis_predict <- predict(tree_model,voting_test[,-1])
library(gmodels)
CrossTable(voting_test[,1], tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE)
CrossTable(voting_test[,1], tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class")      )
conf <- CrossTable(voting_test[,1], tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
str(conf)
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=10)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
boosted_tennis_predict
tennis_predict
boosted_tree_model
tree_model
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=20)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
conf
CrossTable(voting_test[,1], tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
summay(boosted_tennis_predict)
summary(boosted_tennis_predict)
summary(tennis_predict)
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=30)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
conf <- CrossTable(voting_test[,1], tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=40)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=50)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=100)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=20)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=25)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
plot(tennis_predict)
tennis_predict
plot(boosted_tree_model)
?C5.0
library(rpart)
tree_model <- rpart(voting_train$part~., data=voting_train,method='class')
summary(tree_model)
plotcp(tree_model)
plot(tree_model)
voting_train
str())voting_train)
str(voting_train)
tree_model <- rpart(voting_train$party~., data=voting_train,method='class')
plot(tree_model)
voting_train
printcp(tree_model)
summary(tree_model)
C5imp(tree_model)
tree_model <- C5.0(voting_train[,-1],voting_train[,1])
C5imp(tree_model)
pca(voting_train[-1])
prcomp(voting_train[-1])
prcomp(as.matrix(voting_train[-1]))
prcomp(as.matrix(voting_train[,-1]))
as.matrix(voting_train[,-1])
library(party)
install.packages("party")
library(party)
tree_formula <- with(voting_train,voting_train[,-1] ~ .)
tree_formula
p_tree <- ctree(tree_formula,data=voting_train)
head())voting_train)
head(voting_train)
tree_formula <- with(voting_train,voting_train$party ~ .)
p_tree <- ctree(tree_formula,data=voting_train)
table(predict(p_tree),voting_train$party)
plot(p_tree)
plot(p_tree,type='simple')
test_tree <- predict(p_tree, newdata=voting_test[,-1])
table(test_tree,voting_test$party)
?party
?ctree
plot(p_tree,type='simple')
?p_tree
?rpart
p_tree <- rpart(tree_formula,data=voting_train)
plot(p_tree,type='simple')
plot(p_tree)
table(predict(p_tree),voting_train$party)
p_tree
str(p_tree)
tree_formula
str(tree_formula)
print(tree_formula)
plotcp(p_tree)
printcp(p_tree)
p_tree <- rpart(tree_formula,data=voting_train,method='class')
printcp(p_tree)
plot(p_tree)
print(p_tree)
text(p_tree)
tree_formula <- as.formaula(voting_train$party ~ .)
tree_formula <- as.formula(voting_train$party ~ .)
tree_formula
p_tree <- rpart(tree_formula,data=voting_train,method='class')
print(p_tree)
plot(p_tree)
tree_formula <- with(voting_train,voting_train$party ~ .)
p_tree <- ctree(tree_formula,data=voting_train)
plot(p_tree,type='simple')
table(test_tree,voting_test$party)
plot(p_tree)
plot(p_tree,type='simple',abbreviate=TRUE,pval=FALSE,id=FALSE)
plot(p_tree,type='simple',inner_panel=node_inner(abbreviate=TRUE,pval=FALSE,id=FALSE))
plot(p_tree,type='simple',inner_panel=node_inner(p_tree,abbreviate=TRUE,pval=FALSE,id=FALSE))
plot(p_tree,type='simple',inner_panel=node_inner(p_tree,abbreviate=FALSE,pval=FALSE,id=FALSE))
plot(p_tree,
inner_panel=node_inner(p_tree,abbreviate=FALSE,pval=FALSE,id=FALSE)
)
inner_panel=node_inner(p_tree,pval=FALSE,id=FALSE),
terminal_panel=node_terminal(p_tree,
plot(p_tree,
plot(p_tree,
inner_panel=node_inner(p_tree,pval=FALSE,id=FALSE),
terminal_panel=node_terminal(p_tree,
digits = 1,
fill = c("white"),
id = FALSE))
plot(p_tree,
inner_panel=node_inner(p_tree,pval=FALSE,id=FALSE))
inner_panel=node_inner(p_tree,pval=FALSE,id=TRUE))
plot(p_tree,
inner_panel=node_inner(p_tree,pval=FALSE,id=TRUE))
terminal_panel=node_terminal(p_tree, digits = 1, id = FALSE))
plot(p_tree,
inner_panel=node_inner(p_tree,pval=FALSE,id=TRUE),
terminal_panel=node_terminal(p_tree, digits = 1, id = FALSE))
plot(p_tree,
inner_panel=node_inner(p_tree,pval=FALSE,id=TRUE),
terminal_panel=node_terminal(p_tree, digits = 2, id = FALSE))
plot(p_tree,
inner_panel=node_inner(p_tree,pval=FALSE,id=TRUE),
terminal_panel=node_terminal(p_tree, digits = 1, id = TRUE))
BinaryTree
?BinaryTree
entropy_function <- function(p)
{
if (min(p) < 0 || sum(p) <= 0)
return(NA)
p.norm <- p[p>0]/sum(p)
-sum(log2(p.norm)*p.norm)
}
entropy(0.5)
entropy_function(0.5)
entropy_function(1)
entropy_function(0.4)
entropy_function(c(0.5,0.5))
entropy_function(c(0.5,0.6))
entropy_function(c(0.4,0.6))
entropy_function(c(0.3,0.7))
entropy_function(c(0.3,1))
entropy_function(c(0.3,0))
entropy_function(c(0.3,0.1))
entropy_function(c(0.99,0.1))
entropy_function(c(0.99,-10))
head(voting_train)
tree_formula <- with(voting_train,voting_train$party ~ .)
p_tree <- ctree(tree_formula,data=voting_train)
table(predict(p_tree),voting_train$party)
plot(p_tree,
inner_panel=node_inner(p_tree,pval=FALSE,id=TRUE),
terminal_panel=node_terminal(p_tree, digits = 1, id = TRUE))
plot(p_tree,
inner_panel=node_inner(p_tree,pval=FALSE,id=TRUE),
terminal_panel=node_terminal(p_tree, digits = 0, id = TRUE))
?plot
?plot.ctree
?plot.party
?ctree
test_tree <- predict(p_tree, newdata=voting_test[,-1])
table(test_tree,voting_test$party)
conf <- CrossTable(voting_test[,1], test_tree, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
?C5.0
tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=25)
tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1)
tree_formula <- with(voting_train,voting_train$party ~ .)
p_tree <- ctree(tree_formula,data=voting_train)
table(predict(p_tree),voting_train$party)
plot(p_tree,
inner_panel=node_inner(p_tree,pval = FALSE,id = TRUE),
terminal_panel=node_terminal(p_tree, digits = 1, id = TRUE))
tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1)
tree_predict <- predict(tree_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], test_tree, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=25)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=50)
boosted_tennis_predict <- predict(boosted_tree_model,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE, dnn = c("actual class", "predicted class"))
plot(boosted_tree_model)
str(boosted_conf)
summary(boosted_conf)
CrossTable[1]
CrossTable[1,1]
boosted_conf[1,1]
boosted_conf
boosted_conf$t
dig(boosted_conf$t)
diag(boosted_conf$t)
sum(diag(boosted_conf$t))
for (i in 1:50){
for (i in 1:50){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], temp_pred)
print(sum(diag(boosted_conf$t))/sum(boosted_conf$t))
}
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
boosted_conf <- CrossTable(voting_test[,1], temp_pred)
print(sum(diag(boosted_conf$t)))
?CrossTable
table(temp_predvoting_test[,1])
table(temp_pred,voting_test[,1])
sum(diag(table(temp_pred,voting_test[,1]))
sum(diag(table(temp_pred,voting_test[,1])))
sum(diag(table(temp_pred,voting_test[,1])))
for (i in 1:50){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
sum(diag(table(temp_pred,voting_test[,1])))
}
for (i in 1:50){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
boost_acc.append(sum(diag(table(temp_pred,voting_test[,1]))))
}
boost_acc <- 0
append(boost_acc,sum(diag(table(temp_pred,voting_test[,1]))))
boost_acc <- 0
for (i in 1:50){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
append(boost_acc,sum(diag(table(temp_pred,voting_test[,1]))))
}
boost_acc
boost_acc <- 0
for (i in 1:50){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
boost_acc <- append(boost_acc,sum(diag(table(temp_pred,voting_test[,1]))))
}
boost_acc
plot(boost_acc)
boost_acc <- NULL
for (i in 1:50){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
boost_acc <- append(boost_acc,sum(diag(table(temp_pred,voting_test[,1]))))
}
plot(boost_acc)
boost_acc
boost_acc <- NULL
for (i in 1:75){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
boost_acc <- append(boost_acc,sum(diag(table(temp_pred,voting_test[,1]))))
}
plot(boost_acc)
seq(1,100,by=10)
tris <- seq(0,100,by=10)
tris
boost_acc <- NULL
for (i in tris){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
boost_acc <- append(boost_acc,sum(diag(table(temp_pred,voting_test[,1]))))
}
tris <- seq(1,100,by=10)
boost_acc <- NULL
for (i in tris){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
boost_acc <- append(boost_acc,sum(diag(table(temp_pred,voting_test[,1]))))
}
plot(boost_acc)
boost_acc
plot(boost_acc,type='l')
tris <- seq(1,75,by=2)
boost_acc <- NULL
for (i in tris){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i)
temp_pred <- predict(temp,voting_test[,-1])
boost_acc <- append(boost_acc,sum(diag(table(temp_pred,voting_test[,1]))))
}
plot(boost_acc,type='l')
summary(booted_tree_model)
summary(boosted_tree_model)
boosted_tree_model
tree_model
boosted_tree_model <- C5.0(voting_train[,-1],voting_train[,1], trials=25)
boosted_tree_model
summary(boosted_tree_model)
summary(tree_model)
tree_model
str(tree_model)
str(summary(tree_model))
summary(tree_model)
summary(tree_model)[1]
summary(tree_model)[2]
summary(tree_model)[3]
summary(tree_model)[4]
summary(tree_model)$output
summary(tree_model)$outcome
tree_model$outcome
?C5.0
C5imp(tree_model)
plot(C5imp(tree_model))
?C5.0
tree_model$weights
C5imp(tree_model)
tree_model
summary(tree_model)
summary(boostedtree_model)
summary(boosted_tree_model)
str(summary(boosted_tree_model))
C5imp(boosted_tree_model)
boosted_conf <- CrossTable(voting_test[,1], boosted_tennis_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(1,1,1,1),nrow=2)
error_cost
error_cost <- matrix(c(1,1,1,1),nrow=2,dnn=c("1","2"))
error_cost <- matrix(c(1,1,1,1),nrow=2,row.names=c("1","2"))
error_cost <- matrix(c(1,1,1,1),nrow=2,rownames=c("1","2"))
error_cost <- matrix(c(1,1,1,1),nrow=2,colnames=c("1","2"))
error_cost <- matrix(c(1,1,1,1),nrow=2)
error_cost
names(error_cost) <- "hello"
error_cost
rownames(error_cost) <- "hello"
rownames(error_cost) <- c("dem","rep")
error_cost
colnames(error_cost) <- c("dem","rep")
error_cost
rownames(error_cost) <- c("pred dem"," pred rep")
colnames(error_cost) <- c("actual dem","actual rep")
error_cost
error_cost <- as.matrix(c(1,1,1,1),nrow=2)
rownames(error_cost) <- c("pred dem"," pred rep")
colnames(error_cost) <- c("actual dem","actual rep")
error_cost
error_cost <- matrix(c(1,1,1,1),nrow=2)
rownames(error_cost) <- c("pred dem"," pred rep")
colnames(error_cost) <- c("actual dem","actual rep")
error_cost
error_cost <- matrix(c(0,1,0,1),nrow=2)
rownames(error_cost) <- c("pred dem"," pred rep")
colnames(error_cost) <- c("actual dem","actual rep")
error_cost
error_cost <- matrix(c(0,1,1,0),nrow=2)
rownames(error_cost) <- c("pred dem"," pred rep")
colnames(error_cost) <- c("actual dem","actual rep")
error_cost
error_cost <- matrix(c(0,1,1,0),nrow=2)
rownames(error_cost) <- c("pred dem"," pred rep")
colnames(error_cost) <- c("actual dem","actual rep")
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost
)
cost_model
test_tree
tree_predict
tree_predict <- predict(tree_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], tree_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
C5imp(tree_model)
summary(tree_model)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,4,0),nrow=2)
rownames(error_cost) <- c("pred dem"," pred rep")
colnames(error_cost) <- c("actual dem","actual rep")
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
error_cost
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
cost_model
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
error_cost <- matrix(c(0,1,1,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
error_cost
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,2,0),nrow=2)
rownames(error_cost) <- c("pred dem"," pred rep")
colnames(error_cost) <- c("actual dem","actual rep")
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
error_cost
error_cost <- matrix(c(0,1,2,0),nrow=2)
error_cost
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,4,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,1,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,1.5,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,2,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,3,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,1.75,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,2.1,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,2.25,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,2.5,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
error_cost <- matrix(c(0,1,2,0),nrow=2)
cost_model <- C5.0(voting_train[,-1],voting_train[,1], trials=1, costs = error_cost)
cost_predict <- predict(cost_model, newdata=voting_test[,-1])
conf <- CrossTable(voting_test[,1], cost_predict, prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE,
dnn = c("actual class", "predicted class"))
tris <- seq(1,50,by=2)
boost_acc <- NULL
for (i in tris){
temp <- C5.0(voting_train[,-1],voting_train[,1], trials=i, costs = error_cost)
temp_pred <- predict(temp,voting_test[,-1])
boost_acc <- append(boost_acc,sum(diag(table(temp_pred,voting_test[,1]))))
}
plot(boost_acc,type='l')
boost_acc
library(shiny)
setwd('/Users/ilanman/Desktop/Data/Rpres_ML_2')
library(slidify)
slidify('index.rmd')
