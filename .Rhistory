log_ex$sig <- 6/(1+exp(-(log_ex$X-6)))
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_continuous(limits = c(-1, 7))
pts
log_ex
log_ex$sig <- 1/(1+exp(-(log_ex$X-1)))
log_ex
log_ex$sig <- 2/(1+exp(-(log_ex$X-1)))
log_ex$sig
log_ex$sig <- 2/(1+exp(-(log_ex$X-1)))-1
log_ex$sig
log_ex
log_ex$sig <- 6/(1+exp(-(log_ex$X-6)))
log_ex
log_ex <- data.frame(Y=c(rnorm(5,0,0.05),rnorm(5,1,0.05)),X=x)
log_ex
log_ex$sig <- 1/(1+exp(-(log_ex$X-1)))
log_ex
log_ex$sig <- 1/(1+exp(-(log_ex$X-0.5)))
log_ex
log_ex$sig <- 0.5/(1+exp(-(log_ex$X-0.5)))
log_ex
log_ex$sig <- 0.5/(1+exp(-(log_ex$X-2)))
log_ex
log_ex$sig <- 1/(1+exp(-(log_ex$X-1)))
log_ex
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_continuous(limits = c(-1, 1))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_continuous(limits = c(-0.5, 1.5))
pts
log_ex
log_ex$sig <- 1/(1+exp(-(log_ex$X)))
log_ex
log_ex
log_ex$sig <- 1/(1+exp((log_ex$X-1)))
log_ex
log_ex$sig <- 1/(1+exp(-(log_ex$X-1)))
log_ex
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_continuous(limits = c(-0.25, 1.25))
pts
log_ex$X-1
log_ex$sig <- 1/(1+exp(-(log_ex$X)))
log_ex
log_ex$sig <- 1/(1+exp(-(1-log_ex$X)))
log_ex
log_ex$sig <- 1/(1+exp(-(log_ex$X-1)))
log_ex
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_continuous(limits = c(-0.25, 1.25))
pts
log_ex$sig <- 5/(1+exp(-(log_ex$X-1)))
log_ex
log_ex$sig <- 5/(1+exp(-(log_ex$X)))-5
log_ex
log_ex$sig <- 5/(1+exp(-(log_ex$X-5)))
log_ex
log_ex$sig <- 1/(1+exp(-(log_ex$X-5)))
log_ex
log_ex <- data.frame(Y=c(rnorm(5,0,0.05),rnorm(5,1,0.05)),X=x)
log_ex$sig <- 1/(1+exp(-(log_ex$X-5)))
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_continuous(limits = c(-0.25, 1.25))
pts
bad_line <- pts + stat_smooth(method='lm',se=F,color='green',size=1)
bad_line
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,sig),se=F,color='red',size=1,method='auto')
sig_curve
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Y","X","Z")) #scale_y_continuous(limits = c(-0.25, 1.25))
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Y","B","Z")) #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female")) #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Blah","Male","Female")) #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Blah","Male","Female")) + scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Blah","Male","Female"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female"))
pts
log_ex$sig <- 1/(1+exp(-(log_ex$X-5)))+1
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(c("Male","Female"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(labels=c("Male","Female"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female")) + scale_y_discrete(labels=c("bl","hl"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female"),labels=c("gg","jj"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c(-1,1),labels=c("gg","jj"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c(0,1),labels=c("gg","jj"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c(0,0.5),labels=c("gg","jj"))
pts
log_ex
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c(0,1),labels=c("gg","jj"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c(-1,1),labels=c("gg","jj"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c(-1,1),labels=c("gg","ge","jj"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c(-2,2),labels=c("gg","ge","jj"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
discrete_scale(limits=c(-1,1))
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
discrete_scale(limits=c("gg","jj"))
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
discrete_scale(limits=c("gg","jj"),labels=c("fwf","fwh"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female"))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female")) #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_continuous(limits=c("Male","Female")) #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete(limits=c("Male","Female")) #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete() #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
scale_y_discrete("Clarity") #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
ylim("Male","Female") #scale_y_continuous(limits = c(-0.25, 1.25))
pts
log_ex$sig <- 1/(1+exp(-(log_ex$X-5)))+1
pts <- ggplot(log_ex,aes(X,Y)) + geom_point(color='blue',size=3) +
ylim("Male","Female") #scale_y_continuous(limits = c(-0.25, 1.25))
pts
log_ex
pts <- ggplot(log_ex,aes(X+1,Y)) + geom_point(color='blue',size=3) +
ylim("Male","Female") #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y+1)) + geom_point(color='blue',size=3) +
ylim("Male","Female") #scale_y_continuous(limits = c(-0.25, 1.25))
pts
pts <- ggplot(log_ex,aes(X,Y+1)) + geom_point(color='blue',size=3) +
ylim("Male","Female") + scale_y_discrete("Y")
pts
pts <- ggplot(log_ex,aes(X,Y+1)) + geom_point(color='blue',size=3) +
ylim("Male","Female") + ylab("Y")
pts
pts <- ggplot(log_ex,aes(X,Y+1)) + geom_point(color='blue',size=3) +
ylim("Male","Female") + ylab("Y") + scale_x_discrete(x)
pts
pts <- ggplot(log_ex,aes(X,Y+1)) + geom_point(color='blue',size=3) +
ylim("Male","Female") + ylab("Y")
pts
bad_line <- pts + stat_smooth(method='lm',se=F,color='green',size=1)
bad_line
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,sig),se=F,color='red',size=1,method='auto')
sig_curve
log_ex <- data.frame(Y=c(rnorm(5,0,0.05),rnorm(5,1,0.05)),X=x)
log_ex$sig <- 1/(1+exp(-(log_ex$X-5)))
log_ex
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,sig),se=F,color='red',size=1,method='loess')
sig_curve
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,sig),se=F,color='red',size=1,method='auto')
sig_curve
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,sig),se=F,color='red',size=1,method='x')
sig_curve
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,sig),se=F,color='red',size=1)
sig_curve
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,sig),se=F,color='red',size=1,method='auto')
sig_curve
pts <- ggplot(log_ex,aes(X,Y+1)) + geom_point(color='blue',size=3) +
ylim("Male","Female") + ylab("Y")
pts
bad_line <- pts + stat_smooth(method='lm',se=F,color='green',size=1)
bad_line
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,sig),se=F,color='red',size=1,method='auto')
sig_curve
sig_curve <- bad_line + ggplot(data=log_ex,aes(X,sig),se=F,color='red',size=1)
sig_curve
sig_curve <- bad_line + ggplot(data=log_ex,aes(X,Y),se=F,color='red',size=1)
sig_curve
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,Y),se=F,color='red',size=1)
sig_curve
sig_curve <- bad_line + stat_smooth(data=log_ex,aes(X,sig+1),se=F,color='red',size=1)
sig_curve
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
curve(-log(x),from = 0, to = 1, xlab="h(x)", ylab = "Cost", main = "When actual Y=1")
curve(-log(1-x),from = 0, to = 1, xlab="h(x)", ylab = "Cost", main = "When actual Y=0")
curve(-log(x),from = 0, to = 1, xlab="h(x)", ylab = "Cost", main = "When actual Y=1")
curve(-log(1-x),from = 0, to = 1, xlab="h(x)", ylab = "Cost", main = "When actual Y=0")
=250*1000
250*1000
250*1200
250*1100
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
x = -10:10
x
x <- c(-10:10)
x
y <- x^2
y
plot(y)
plot(y,'l')
plot(y,type='l')
pwr <- function(x) x^2
curve(pwr,from=-3,to=3,main="Curve with Global Minimum")
points(-2,pwr(-2),col='red',pch=19)
pwr <- function(x) x^2
curve(pwr,from=-3,to=3,main="Curve with Global Minimum")
points(-2,pwr(-2),col='red',pch=19)
points(-1.2,pwr(-1.2),col='red',pch=19)
points(-0.6,pwr(-0.6),col='red',pch=19)
points(-0.2,pwr(-0.2),col='red',pch=19)
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
m <- matrix(c(x1,x2),ncol=2)  ## x1, x2 are eigenvectors
m <- m/sqrt(norm(m))  ## normalize
as.matrix(m %*% diag(roots) %*% t(m))
slidify("index.rmd")
data <- read.csv('tennis_data_2013.csv')
data$Player1 <- as.character(data$Player1)
data$Player2 <- as.character(data$Player2)
tennis <- data
m <- length(data)
for (i in 10:m){
tennis[,i] <- ifelse(is.na(data[,i]),0,data[,i])
}
features <- tennis[,10:m]
head(features)
str(features)
dim(features)
str(features)
dim(features)
head(features)
str(features)
scaled_features <- as.matrix(scale(features))
Cx <- cov(scaled_features)
eigenvectors <- eigen(Cx)$vectors
eigenvectors
pca.df$rotation
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
curve(1/(1+exp(-x)), from = -10, to = 10, ylab="P(Y=1|X)", col = 'red', lwd = 3.0)
abline(a=0.5, b=0, lty=2, col='blue', lwd = 3.0,main="Threshold = 0.5")
curve(-log(x),from = 0, to = 1, xlab="h(x)", ylab = "Cost", main = "When actual Y=1")
curve(-log(1-x),from = 0, to = 1, xlab="h(x)", ylab = "Cost", main = "When actual Y=0")
slidify("index.rmd")
slidify("index.rmd")
draw.kmeans = function(w, k=2, dimension=2, iteration=500,
method="euclidean", initial="random", save=FALSE) {
require(rgl)
if(!(dimension ==2 || dimension == 3)) {
stop("dimension should be 2 or 3\n")
}
if(dimension > dim(w)[2]) {
stop("dimesion should be no smaller than that of data\n")
}
if(dim(w)[2] < 2) {
stop("w must contain at least two dimensions\n")
}
if(dim(w)[2] > dimension) {
pca.res = prcomp(w)
comp = pca.res$x[,1:dimension]
explain = sum(pca.res$sdev[1:dimension]^2)/sum(pca.res$sdev^2)
}
center = matrix(0, nrow=k, ncol=dim(w)[2])
if(initial == "quantile") {
for(i in 1:k) {
center[i, ] = apply(w, 2, function(x) {quantile(x, i/(k+1))})
}
}
if(initial == "random") {
center = w[sample(1:dim(w)[1], k, replace=FALSE), ]
}
if(save) {
dir = paste(sample(letters, 26, replace=FALSE), collapse="")
dir = paste("_", dir, sep="")
dir.create(dir)
setwd(dir)
}
if(save && dimension == 2) {
png(file="0.k-means.png")
}
if(dimension == 2) {
if(dim(w)[2] > 2) {
plot(comp[,1], comp[,2], xlab="First component", ylab="Second component",
sub=paste("initial, explain =", explain), main="k-means cluster animation")
cp = pca.trans(center, pca.res, k = 2)
points(cp[,1], cp[,2], col="red", pch=20)
text(cp[,1], cp[,2], 1:k, cex=1.5)
}
else {
plot(w[,1], w[,2], xlab="x", ylab="y", sub="initial", main="k-means cluster animation")
points(center[,1], center[,2], col="red", pch=20)
text(center[,1], center[,2], 1:k, cex=1.5)
}
}
if(dimension == 3) {
if(dim(w)[2] > 3) {
plot3d(comp[,1], comp[,2], comp[, 3], xlab="First component", ylab="Second component",
zlab="Third component", sub=paste("initial, explain =", explain),
main="k-means cluster animation")
cp = pca.trans(center, pca.res, k = 3)
points3d(cp[,1], cp[,2], cp[,3], col="red", pch=20)
text3d(cp[,1], cp[,2], cp[,3], 1:k, cex=rep(1.5, dim(cp)[1]))
}
else {
plot3d(w[,1], w[,2], w[,3], xlab="x", ylab="y", zlab="z", sub="initial",
main="k-means cluster animation")
points3d(center[,1], center[,2], center[,3], col="red", pch=20)
text3d(center[,1], center[,2], center[,3], 1:k, cex=rep(1.5, dim(center)[1]))
}
}
if(save && dimension == 2) {
dev.off()
}
if(save && dimension == 3) {
snapshot3d("0.k-means.png")
}
# do kmeans
belong.flag = NULL
iter = 1
while(iter <= iteration) {
Sys.sleep(1)
d = matrix(0, nrow=dim(w)[1], ncol=k)
for (c in 1:k) {
d[, c] = apply(w, 1, function(x){distance(x, center[c,], method=method)})
}
belong = matrix(FALSE, nrow=dim(w)[1], ncol=k)
for (b in 1:dim(belong)[1]) {
belong[b, which.min(d[b, ])] = TRUE
}
for(i in 1:k) {
center[i, ] = apply(w, 2, function(x) {sum(x * belong[, i])/sum(belong[, i])})
}
# draw
if(save && dimension == 2) {
png(file=paste(iter, ".k-means.png", sep=""))
}
color = numeric(dim(belong)[1])
for(i in 1:dim(belong)[2]) {
color = color + i*belong[,i]
}
if(dimension == 2) {
if(dim(w)[2] > 2) {
plot(comp[,1], comp[,2], xlab="First component", ylab="Second component",
sub=paste(iter, "initial, explain =", explain), main="k-means cluster animation", col=color)
cp = pca.trans(center, pca.res, k = 2)
points(cp[,1], cp[,2], col="red", pch=20)
text(cp[,1], cp[,2], 1:k, cex=1.5)
for(i in 1:k) {
x = comp[belong[, i], 1]
y = comp[belong[, i], 2]
hull = chull(x, y)
polygon(x[hull], y[hull], border=i)
}
}
else {
plot(w[,1], w[,2], xlab="x", ylab="y", sub=paste(iter, "iterations"),
main="k-means cluster animation", col=color)
points(center[,1], center[,2], col="red", pch=20)
text(center[,1], center[,2], 1:k, cex=1.5)
for(i in 1:k) {
x = w[belong[, i], 1]
y = w[belong[, i], 2]
hull = chull(x, y)
polygon(x[hull], y[hull], border=i)
}
}
}
if(dimension == 3) {
if(dim(w)[2] > 3) {
plot3d(comp[,1], comp[,2], comp[, 3], xlab="First component", ylab="Second component",
zlab="Third component", sub=paste(iter, "initial, explain =", explain),
main="k-means cluster animation", col=color)
cp = pca.trans(center, pca.res, k = 3)
points3d(cp[,1], cp[,2], cp[,3], col="red")
text3d(cp[,1], cp[,2], cp[,3], 1:k, cex=rep(1.5, dim(cp)[1]))
}
else {
plot3d(w[,1], w[,2], w[,3], xlab="x", ylab="y", zlab="z", sub=paste(iter, "iterations"),
main="k-means cluster animation", col=color)
points3d(center[,1], center[,2], center[,3], col="red")
text3d(center[,1], center[,2], center[,3], 1:k, cex=rep(1.5, dim(center)[1]))
}
}
if(save && dimension == 2) {
dev.off()
}
if(save && dimension == 3) {
snapshot3d(paste(iter, ".k-means.png", sep=""))
}
cat(paste(iter, "iterations\n"))
if(identical(belong, belong.flag)) {
break
}
belong.flag = belong
iter = iter + 1
}
if(save) {
pstr = Sys.getenv()["PATH"]
path = unlist(strsplit(pstr, ";"))
image.magick.path = path[grepl("ImageMagick", path)]
convert.path = file.path(image.magick.path, "convert.exe")
command = paste("\"", convert.path, "\"", " -delay 80 *.k-means.png ../output.gif")
#system(command)
#file.remove(list.files(pattern=".png"))
setwd("..")
#file.remove(dir)
cat(paste("file at ", getwd() , "/", dir, "\n", sep=""))
}
rownames(belong) = rownames(w)
colnames(belong) = paste("C", 1:k, sep="")
return(invisible(belong))
}
# find the principle component
pca.trans = function(m, pca.res=prcomp(m), k =2) {
if(k > dim(m)[2]) {
stop("!")
}
w = matrix(0, nrow=dim(m)[1], ncol=k)
for(i in 1:dim(m)[1]) {
for ( j in 1:k) {
w[i,j] = sum((m[i, ] - pca.res$center)*pca.res$rotation[,j])
}
}
return(w)
}
# calculate distance between two vectors
distance = function(x, y, method="euclidean") {
m = matrix(0, nrow=2, ncol=length(x))
m[1, ] = x
m[2, ] = y
if(method == "pearson" || method == "spearman" || method == "kendall") {
d = 1 - cor(x, y, method=method)
}
else {
d = as.vector(dist(m, method=method))
}
return(d)
}
draw.kmeans = function(w, k=2, dimension=2, iteration=500,
method="euclidean", initial="random", save=FALSE)
function(w, k=2, dimension=2, iteration=500,
method="euclidean", initial="random", save=FALSE)
draw.kmeans
l = 1000
w = matrix(rnorm(l*3), l)
draw.kmeans(w, k=5)
l = 100
w = matrix(rnorm(l*3), l)
draw.kmeans(w, k=5)
library("animation", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
l = 100
w = matrix(rnorm(l*3), l)
draw.kmeans(w, k=5)
draw.kmeans = function(w, k=2, dimension=2, iteration=500,
method="euclidean", initial="random", save=FALSE)
l = 100
w = matrix(rnorm(l*3), l)
draw.kmeans(w, k=5)
function(w, k=2, dimension=2, iteration=500,
method="euclidean", initial="random", save=FALSE)
draw.kmeans(w, k=5)
draw.kmeans(w, k=5)
kmeans.ani(x = cbind(X1 = runif(50), X2 = runif(50)), centers = 3, hints = c("Move centers!",
"Find cluster?"), pch = 1:3, col = 1:3)
kmeans.ani(x = cbind(X1 = runif(50), X2 = runif(50)), centers = 3, hints = c("Move centers!",
"Find cluster?"), pch = 1:3, col = 1:3)
kmeans.ani(x = cbind(X1 = runif(50), X2 = runif(50)), centers = 3, hints = c("Move centers!",
"Find cluster?"), pch = 1:3, col = 1:3)
